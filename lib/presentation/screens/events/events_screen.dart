import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../core/theme/app_colors.dart';
import '../../../core/theme/app_typography.dart';
import 'event_details_screen.dart';
import 'models/event_model.dart';

class EventsScreen extends StatelessWidget {
  const EventsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.grey50,
      appBar: AppBar(
        backgroundColor: AppColors.white,
        elevation: 0,
        title: Text(
          '–ê—Ñ–∏—à–∞',
          style: AppTypography.titleLarge.copyWith(
            fontWeight: FontWeight.w600,
            color: AppColors.secondary,
          ),
        ),
        centerTitle: true,
        actions: [
          IconButton(
            onPressed: () {},
            icon: const Icon(
              Icons.search,
              color: AppColors.secondary,
            ),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Upcoming Events Section
            Text(
              '–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è',
              style: AppTypography.titleMedium.copyWith(
                fontWeight: FontWeight.w600,
                color: AppColors.secondary,
              ),
            ),
            const SizedBox(height: 16),
            
            // Event Cards
            ...sampleEvents.map((event) => Padding(
              padding: const EdgeInsets.only(bottom: 12),
              child: _buildEventCard(
                context,
                event: event,
              ),
            )),
            
            const SizedBox(height: 24),
            
            // Categories Section
            Text(
              '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π',
              style: AppTypography.titleMedium.copyWith(
                fontWeight: FontWeight.w600,
                color: AppColors.secondary,
              ),
            ),
            const SizedBox(height: 16),
            
            _buildCategoryGrid(),
          ],
        ),
      ),
    );
  }

  Widget _buildEventCard(BuildContext context, {required EventModel event}) {
    return Container(
      decoration: BoxDecoration(
        color: AppColors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: AppColors.black.withOpacity(0.04),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: () {
            print('üéØ –ù–∞–∂–∞—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${event.title}');
            HapticFeedback.lightImpact();
            try {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => EventDetailsScreen(event: event),
                ),
              );
              print('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } catch (e) {
              print('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: $e');
            }
          },
          borderRadius: BorderRadius.circular(16),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                Container(
                  width: 60,
                  height: 60,
                  decoration: BoxDecoration(
                    color: event.color.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Icon(
                    event.icon,
                    color: event.color,
                    size: 28,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        event.title,
                        style: AppTypography.titleSmall.copyWith(
                          fontWeight: FontWeight.w600,
                          color: AppColors.secondary,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        event.description.length > 60 
                          ? '${event.description.substring(0, 60)}...'
                          : event.description,
                        style: AppTypography.bodySmall.copyWith(
                          color: AppColors.grey600,
                        ),
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Icon(
                            Icons.access_time,
                            size: 16,
                            color: AppColors.grey400,
                          ),
                          const SizedBox(width: 4),
                          Text(
                            event.dateTime,
                            style: AppTypography.labelSmall.copyWith(
                              color: AppColors.grey600,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                Icon(
                  Icons.arrow_forward_ios,
                  size: 16,
                  color: AppColors.grey400,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  static final List<EventModel> sampleEvents = [
    EventModel(
      title: '–ë–æ–ª—å—à–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –≤ –ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä–µ –í–µ—á–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞',
      dateTime: '7 –∏—é–Ω—è, 19:30',
      description: '7 –∏—é–Ω—è –≤ 19:30 –Ω–∞ —Å—Ü–µ–Ω–µ –∞–º—Ñ–∏—Ç–µ–∞—Ç—Ä–∞ –í–µ—á–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã—Å—Ç—É–ø—è—Ç –≤—Å–µ–º–∏—Ä–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤—ã –•–æ—Ä –¢—É—Ä–µ—Ü–∫–æ–≥–æ & Soprano —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π ¬´–ü–µ—Å–Ω–∏ –ü–æ–±–µ–¥—ã¬ª. –í–∞—Å –∂–¥–µ—Ç –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –≤–µ—á–µ—Ä –∂–∏–≤–æ–π –º—É–∑—ã–∫–∏, —è—Ä–∫–∏—Ö —ç–º–æ—Ü–∏–π –∏ –ª—é–±–∏–º—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–¥–∏–Ω—è—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è. –ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Ä–∞–¥–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å —Å–µ–º—å–µ–π –∏ –¥—Ä—É–∑—å—è–º–∏!',
      location: '–ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä –í–µ—á–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, Silk Road Samarkand',
      color: const Color(0xFF1565C0),
      icon: Icons.music_note,
    ),
    EventModel(
      title: '–§–µ—Å—Ç–∏–≤–∞–ª—å —Ñ–æ–Ω—Ç–∞–Ω–æ–≤',
      dateTime: '25 –¥–µ–∫–∞–±—Ä—è, 19:30',
      description: '–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ —Å–≤–µ—Ç–æ–≤–æ–µ –∏ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ —à–æ—É —É –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö —Ñ–æ–Ω—Ç–∞–Ω–æ–≤ –∫–æ–º–ø–ª–µ–∫—Å–∞. –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–æ–¥–Ω—ã–µ —Å—Ç—Ä—É–∏, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –º—É–∑—ã–∫—É.',
      location: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, Silk Road Samarkand',
      color: const Color(0xFF2196F3),
      icon: Icons.water_drop,
    ),
    EventModel(
      title: '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –≥–∞–ª–∞',
      dateTime: '31 –¥–µ–∫–∞–±—Ä—è, 21:00',
      description: '–í—Å—Ç—Ä–µ—Ç—å—Ç–µ –ù–æ–≤—ã–π –≥–æ–¥ –≤ —Ä–æ—Å–∫–æ—à–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ –≤–æ—Å—Ç–æ—á–Ω–æ–≥–æ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–∞! –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –±–∞–Ω–∫–µ—Ç, –∂–∏–≤–∞—è –º—É–∑—ã–∫–∞, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞.',
      location: '–ì–ª–∞–≤–Ω—ã–π –±–∞–Ω–∫–µ—Ç–Ω—ã–π –∑–∞–ª, Silk Road Samarkand',
      color: const Color(0xFFE91E63),
      icon: Icons.celebration,
    ),
    EventModel(
      title: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–º–µ—Å–µ–ª',
      dateTime: '15 —è–Ω–≤–∞—Ä—è, 15:00',
      description: '–ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥—Ä–µ–≤–Ω–∏–º–∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏ —É–∑–±–µ–∫—Å–∫–æ–≥–æ —Ä–µ–º–µ—Å–ª–∞. –ù–∞—É—á–∏—Ç–µ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–µ—Ä–∞–º–∏–∫–æ–π, —Ç–∫–∞—Ü–∫–∏–º —Å—Ç–∞–Ω–∫–æ–º –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–∫—Ä–∞—à–µ–Ω–∏—è –≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ.',
      location: '–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Ä–µ–º–µ—Å–µ–ª, Silk Road Samarkand',
      color: AppColors.primary,
      icon: Icons.palette,
    ),
  ];

  Widget _buildCategoryGrid() {
    final categories = [
      {'title': '–ö–æ–Ω—Ü–µ—Ä—Ç—ã', 'icon': Icons.music_note, 'color': AppColors.primary},
      {'title': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã', 'icon': Icons.palette, 'color': const Color(0xFF4CAF50)},
      {'title': '–≠–∫—Å–∫—É—Ä—Å–∏–∏', 'icon': Icons.location_on, 'color': const Color(0xFF2196F3)},
      {'title': '–®–æ—É', 'icon': Icons.theater_comedy, 'color': const Color(0xFFE91E63)},
    ];

    return GridView.builder(
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 2,
        crossAxisSpacing: 12,
        mainAxisSpacing: 12,
        childAspectRatio: 1.5,
      ),
      itemCount: categories.length,
      itemBuilder: (context, index) {
        final category = categories[index];
        return Container(
          decoration: BoxDecoration(
            color: AppColors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: AppColors.black.withOpacity(0.04),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Material(
            color: Colors.transparent,
            child: InkWell(
              onTap: () {},
              borderRadius: BorderRadius.circular(16),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      width: 48,
                      height: 48,
                      decoration: BoxDecoration(
                        color: (category['color'] as Color).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Icon(
                        category['icon'] as IconData,
                        color: category['color'] as Color,
                        size: 24,
                      ),
                    ),
                    const SizedBox(height: 12),
                    Text(
                      category['title'] as String,
                      style: AppTypography.titleSmall.copyWith(
                        fontWeight: FontWeight.w600,
                        color: AppColors.secondary,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
    );
  }
} 